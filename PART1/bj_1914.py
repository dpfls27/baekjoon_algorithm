import sys

# 하노이의 탑 개념 
'''
    최초 = A , 거쳐가는 = B, 최종 = C 
    N = 1 일때 A->C --- 1번 
    N = 2 일때 A->B (작은거) A->C (그다음 작은거) B->C--- 3번 
    N = 3 일때 
        마지막 제일 큰 원반을 C로 옮기려면 
        1) 제일 큰 원반을 제외한 나머지 원반들이 A->B로 가야하고 
        2) A->C로 제일 큰 원반을 옮기고 나서 
        3) 나머지 원반들을 다시 B->C로 옮겨야 하므로 
        
        A->B(제일큰거제외 나머지 원반 2개) ---- 3번
        A->C(제일큰 원반 옮기기) ---- 1번
        B->C(제일큰거제외 나머지 원반 2개) ---- 3번
        -------------------> 총 7번
    N = 4 일때
        위와 같은 규칙으로 
        A->B(제일큰거제외 나머지 원반 3개) ---- 7번
        A->C(제일큰 원반 옮기기) ---- 1번
        B->C(제일큰거제외 나머지 원반 3개) ---- 7번
        --------------------> 총 15번 
    즉, f(n) = 1 + 2f(n-1) 라는 공식이 완성 
    f(n) = 2^n - 1
    
''' 

def Hanoi(N, A, B, C): #원반의 개수, 첫번째 장대 , 두번째 장대, 세번째 장대
    if N == 1 :
        print(A,C)
    
    else:
        Hanoi(N-1, A, C, B) # 재귀함수 사용. 위 주석문에서의 1)과정에 해당 
        print(A,C) # 2)과정에 해당. 위 Hanoi(N-1, A, C, B) 인 상태에서 첫번째장대에서 두번째 장대로 
                   # 이동하는 과정은 A->C 이므로 print(A,C)인 상태 
        Hanoi(N-1, B, A, C) # 3)과정에 해당 # 바로 위 주석문과 동일한 설명으로 print(A,C)가 성립 
        
    
N = int(sys.stdin.readline()) # N은 원판의 개수 단, 1 ≤ N ≤ 100
K = 2**N -1 #K 는 총 이동 횟수 

print(K)
if N <= 20:
    Hanoi(N, 1, 2, 3)


